// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DatatunnelControllerClient is the client API for DatatunnelController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatatunnelControllerClient interface {
	ControlStream(ctx context.Context, opts ...grpc.CallOption) (DatatunnelController_ControlStreamClient, error)
}

type datatunnelControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDatatunnelControllerClient(cc grpc.ClientConnInterface) DatatunnelControllerClient {
	return &datatunnelControllerClient{cc}
}

func (c *datatunnelControllerClient) ControlStream(ctx context.Context, opts ...grpc.CallOption) (DatatunnelController_ControlStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatatunnelController_serviceDesc.Streams[0], "/proto.DatatunnelController/ControlStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &datatunnelControllerControlStreamClient{stream}
	return x, nil
}

type DatatunnelController_ControlStreamClient interface {
	Send(*ControlStreamData) error
	Recv() (*ControlStreamData, error)
	grpc.ClientStream
}

type datatunnelControllerControlStreamClient struct {
	grpc.ClientStream
}

func (x *datatunnelControllerControlStreamClient) Send(m *ControlStreamData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datatunnelControllerControlStreamClient) Recv() (*ControlStreamData, error) {
	m := new(ControlStreamData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatatunnelControllerServer is the server API for DatatunnelController service.
// All implementations must embed UnimplementedDatatunnelControllerServer
// for forward compatibility
type DatatunnelControllerServer interface {
	ControlStream(DatatunnelController_ControlStreamServer) error
	mustEmbedUnimplementedDatatunnelControllerServer()
}

// UnimplementedDatatunnelControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDatatunnelControllerServer struct {
}

func (UnimplementedDatatunnelControllerServer) ControlStream(DatatunnelController_ControlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ControlStream not implemented")
}
func (UnimplementedDatatunnelControllerServer) mustEmbedUnimplementedDatatunnelControllerServer() {}

// UnsafeDatatunnelControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatatunnelControllerServer will
// result in compilation errors.
type UnsafeDatatunnelControllerServer interface {
	mustEmbedUnimplementedDatatunnelControllerServer()
}

func RegisterDatatunnelControllerServer(s *grpc.Server, srv DatatunnelControllerServer) {
	s.RegisterService(&_DatatunnelController_serviceDesc, srv)
}

func _DatatunnelController_ControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatatunnelControllerServer).ControlStream(&datatunnelControllerControlStreamServer{stream})
}

type DatatunnelController_ControlStreamServer interface {
	Send(*ControlStreamData) error
	Recv() (*ControlStreamData, error)
	grpc.ServerStream
}

type datatunnelControllerControlStreamServer struct {
	grpc.ServerStream
}

func (x *datatunnelControllerControlStreamServer) Send(m *ControlStreamData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datatunnelControllerControlStreamServer) Recv() (*ControlStreamData, error) {
	m := new(ControlStreamData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DatatunnelController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DatatunnelController",
	HandlerType: (*DatatunnelControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlStream",
			Handler:       _DatatunnelController_ControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/datatunnel/proto/datatunnel_control.proto",
}
